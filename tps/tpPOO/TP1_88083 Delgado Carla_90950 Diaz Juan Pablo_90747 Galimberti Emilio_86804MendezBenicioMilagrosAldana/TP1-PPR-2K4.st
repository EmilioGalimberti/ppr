Object subclass: #Direccion	instanceVariableNames: 'nombre apellido porcentajeVentas'	classVariableNames: ''	package: 'TP1-PPR-2K4'!!Direccion commentStamp: 'MB 5/4/2022 00:26' prior: 0!"Clase Dirreccion"!!Direccion methodsFor: 'control' stamp: 'MB 5/4/2022 00:43'!asString 	^ 'Nombre : ' , nombre , '|Apellido : ' , apellido , '|Porcentaje de Ventas : ' , porcentajeVentas asString.  ! !!Direccion methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:26'!apellido	^ apellido! !!Direccion methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:26'!apellido: anObject	apellido := anObject! !!Direccion methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:26'!nombre	^ nombre! !!Direccion methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:26'!porcentajeVentas: anObject	porcentajeVentas := anObject! !!Direccion methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:26'!nombre: anObject	nombre := anObject! !!Direccion methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:26'!porcentajeVentas	^ porcentajeVentas! !!Direccion methodsFor: 'inicializacion' stamp: 'MB 5/4/2022 04:11'!initialize 	super initialize.		nombre := ' '.	apellido := ' '.	porcentajeVentas := 0.0. ! !Object subclass: #Entrada	instanceVariableNames: 'vendida importeBasico'	classVariableNames: ''	package: 'TP1-PPR-2K4'!!Entrada commentStamp: 'MB 5/4/2022 00:35' prior: 0!"Clase Entrada"!!Entrada methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:35'!vendida: anObject	vendida := anObject! !!Entrada methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:35'!vendida	^ vendida! !!Entrada methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:35'!importeBasico	^ importeBasico! !!Entrada methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:35'!importeBasico: anObject	importeBasico := anObject! !!Entrada methodsFor: 'control' stamp: 'MB 5/4/2022 00:50'!asString 	|aux|		aux := 'NO'.	vendida  ifTrue: [ aux := 'SI' ].		^ 'Vendida : ' , aux  , '|Importe Basico : ' , importeBasico asString.  ! !!Entrada methodsFor: 'control' stamp: 'MB 5/4/2022 00:39'!importeFinal"Permite calcula el importe final segun el tipo de entrada"	^ self subclassResponsibility ! !!Entrada methodsFor: 'inicializacion' stamp: 'MB 5/4/2022 00:37'!initialize 	super initialize.		vendida := false.	importeBasico := 0.0. ! !Entrada subclass: #EntradaPlatea	instanceVariableNames: 'nroButaca'	classVariableNames: ''	package: 'TP1-PPR-2K4'!!EntradaPlatea commentStamp: 'MB 5/4/2022 00:57' prior: 0!"Clase EntradaPLatea es una clase hija(herencia) de la clase Entrada"!!EntradaPlatea methodsFor: 'control' stamp: 'MB 5/4/2022 00:59'!asString 	^ super asString , '|Nro de Butaca : ' , nroButaca asString. ! !!EntradaPlatea methodsFor: 'control' stamp: 'MB 5/4/2022 05:27'!importeFinal 	|imp| 		imp := 0.0.	(nroButaca between: 1 and: 49) ifTrue: [ 			imp := importeBasico * 1.25 		 ]. 	(nroButaca between: 50 and: 99) ifTrue: [ 			imp := importeBasico * 1.1 		 ].	^imp.! !!EntradaPlatea methodsFor: 'inicializacion' stamp: 'MB 5/4/2022 00:58'!initialize 	super initialize.		nroButaca := 0. ! !!EntradaPlatea methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:57'!nroButaca	^ nroButaca! !!EntradaPlatea methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:57'!nroButaca: anObject	nroButaca := anObject! !Entrada subclass: #EntradaVip	instanceVariableNames: 'servicioCatering palco'	classVariableNames: ''	package: 'TP1-PPR-2K4'!!EntradaVip commentStamp: 'MB 5/4/2022 00:52' prior: 0!"Clase EntradaVip es una clase hija(herencia) de la clase Entrada"!!EntradaVip methodsFor: 'inicializacion' stamp: 'MB 5/4/2022 03:13'!initialize 	super initialize.		servicioCatering := false.	palco := Palco new.	 ! !!EntradaVip methodsFor: 'control' stamp: 'MB 5/4/2022 03:24'!asString 	|aux|		aux := 'NO'.	servicioCatering ifTrue: [ aux := 'SI' ].	^ super asString , '|Servicio de Catering : ' , aux , '|Palco : ' , palco. ! !!EntradaVip methodsFor: 'control' stamp: 'mb 5/5/2022 20:44'!importeFinal 	|impVip|		impVip := importeBasico * self palco cantidadAsientos.	(servicioCatering) ifTrue: [ impVip := impVip * 1.3 ].		^impVip.   ! !!EntradaVip methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:54'!servicioCatering	^ servicioCatering! !!EntradaVip methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:54'!palco	^ palco! !!EntradaVip methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:54'!palco: anObject	palco := anObject! !!EntradaVip methodsFor: 'acceso' stamp: 'MB 5/4/2022 00:54'!servicioCatering: anObject	servicioCatering := anObject! !Object subclass: #Funcion	instanceVariableNames: 'fecha codigo entradas'	classVariableNames: ''	package: 'TP1-PPR-2K4'!!Funcion commentStamp: 'MB 5/4/2022 03:31' prior: 0!"Clase Funcion"!!Funcion methodsFor: 'control' stamp: 'MB 5/4/2022 03:57'!asString 	| listado |	listado := ''.	self entradas do: [ :unaEntrada | listado := listado , unaEntrada asString  ].		^String cr, 'Fecha : ' , fecha asString , '|Codigo : ' , codigo asString , '|Entradas : ' , String cr , listado. ! !!Funcion methodsFor: 'inicializacion' stamp: 'MB 5/4/2022 03:37'!initialize 	super initialize.		fecha := Date today.	codigo := 0.	entradas := OrderedCollection new. ! !!Funcion methodsFor: 'acceso' stamp: 'MB 5/4/2022 03:34'!codigo: anObject	codigo := anObject! !!Funcion methodsFor: 'acceso' stamp: 'MB 5/4/2022 03:34'!entradas	^ entradas! !!Funcion methodsFor: 'acceso' stamp: 'MB 5/4/2022 03:34'!codigo	^ codigo! !!Funcion methodsFor: 'acceso' stamp: 'MB 5/4/2022 03:34'!fecha	^ fecha! !!Funcion methodsFor: 'acceso' stamp: 'MB 5/4/2022 03:34'!fecha: anObject	fecha := anObject! !!Funcion methodsFor: 'acceso' stamp: 'MB 5/4/2022 03:34'!entradas: anObject	entradas := anObject! !Object subclass: #ObraTeatro	instanceVariableNames: 'titulo funciones direccion'	classVariableNames: ''	package: 'TP1-PPR-2K4'!!ObraTeatro commentStamp: 'MB 5/4/2022 03:33' prior: 0!"Clase Obra teatro"!!ObraTeatro methodsFor: 'control' stamp: 'cd 5/5/2022 15:18'!habilitarEntrada: unaEntrada y: unCodigoFun	|bandCod bandRet|		bandCod := self verificarCodigo: unCodigoFun. 	(( bandCod isNotNil ) & (unaEntrada isKindOf: Entrada )) ifTrue: [ 			unaEntrada vendida: false.			bandCod entradas add: unaEntrada.			bandRet := true.  		 ] ifFalse: [ bandRet := false ].		^bandRet .! !!ObraTeatro methodsFor: 'control' stamp: 'MB 5/4/2022 05:26'!addFuncion:unaFuncion	|band1 band2|		band1  :=  self verificarCodigo: unaFuncion codigo.   	((unaFuncion  isKindOf: Funcion ) & ( band1 isNil )) ifTrue: [ 		funciones add: unaFuncion .		band2 := true.		 ] ifFalse: [ band2 := false ].		^band2 .! !!ObraTeatro methodsFor: 'control' stamp: 'mb 5/5/2022 20:58'!venderEntradaVip:unCodigo aceptoServicioCatering:unBoolean	|bandEnt mensaje entNoVend auxFun imp aux|		bandEnt := self verificarCodigo: unCodigo.	entNoVend := nil.	aux := 'NO'.	unBoolean  ifTrue: [ aux := 'SI' ].	( bandEnt isNotNil ) ifTrue: [			auxFun :=  self funciones at: unCodigo.						entNoVend := auxFun entradas detect: [ :nro | ((nro vendida = false)&(nro isKindOf: EntradaVip))] ifNone: [ entNoVend := nil].									( entNoVend isNotNil ) ifTrue: [				entNoVend vendida: true.				(unBoolean) ifTrue: [ entNoVend servicioCatering: true ].				imp := entNoVend importeFinal.				mensaje := '|codigo de la funcion : ', unCodigo asString , '|fecha de la funcion : ',  				auxFun fecha asString , '|acepta servicio de catering(si/no) : ' , aux , '|codigo de palco asignado : ', 	entNoVend palco codigo  , '|importe final de dicha entrada : ' , imp asString.				 ] ifFalse: [ mensaje := 'No se encontro ninguna entrada vip disponible para la venta' ].		] ifFalse: [ mensaje := 'Funcion no encontrada' ].					^mensaje .! !!ObraTeatro methodsFor: 'control' stamp: 'cd 5/5/2022 14:16'!importeTotalVentasFechaDesde:fechaIni fechaHasta:fechaFin	|intervaloFechas importeTotal|		importeTotal := 0.0.	intervaloFechas := self funciones select: [ :fun | (fun fecha between: fechaIni  and: fechaFin ) ].	( intervaloFechas isNotEmpty ) ifTrue: [ 		intervaloFechas  do: [ :x | 			x entradas do: [ :j | ( j vendida ) ifTrue: [ 					importeTotal := importeTotal + ( j importeFinal ) 					]. 			]. 		] .	].	^ importeTotal .	! !!ObraTeatro methodsFor: 'control' stamp: 'mb 5/5/2022 21:48'!listadoOrdenadoNroButacasDisponiblesParaFuncion:unCodigo 	|verificacion bloque listado|		bloque := [ :x :y | x <= y ].	listado := SortedCollection new sortBlock: bloque. 	verificacion := self verificarCodigo: unCodigo.	 ( verificacion isNotNil ) ifTrue: [ 			verificacion entradas do: [ :j | ((j vendida = false) & (j isKindOf: EntradaPlatea )) ifTrue: [ 					listado add: j nroButaca asString,'-'. 					 ].				 ]. 				 ].	^listado.! !!ObraTeatro methodsFor: 'control' stamp: 'MB 5/4/2022 05:26'!verificarCodigo:unCodigo	|ver|		ver := funciones detect: [ :cod | cod codigo = unCodigo ] ifNone: [ ver := nil].		^ver .	! !!ObraTeatro methodsFor: 'control' stamp: 'MB 5/4/2022 04:07'!asString 	| listado |	listado := ''.	self funciones  do: [ :unaFuncion | listado := listado , unaFuncion asString  ].		^String cr , 'Titulo : ' , titulo , '|Funciones : ' , String cr , listado , '|Direccion : ' , direccion asString.  ! !!ObraTeatro methodsFor: 'control' stamp: 'mb 5/5/2022 20:55'!venderEntradaPlatea:unCodigo 	|funcionEncontrada mensaje entNoVend imp|		funcionEncontrada := self verificarCodigo: unCodigo.	entNoVend := nil.	( funcionEncontrada isNotNil ) ifTrue: [			entNoVend := funcionEncontrada entradas detect: [ :nro | ((nro vendida = false)&(nro isKindOf: EntradaPlatea))] ifNone: [ entNoVend := nil ].						 			( entNoVend isNotNil ) ifTrue: [				imp := entNoVend importeFinal.				entNoVend vendida: true.				mensaje := '|codigo de la funcion : ', unCodigo asString , '|fecha de la funcion : ', funcionEncontrada fecha asString , '|numero de butaca asignado : ', entNoVend nroButaca asString  , '|importe final de dicha entrada : ' , imp asString.				 ] ifFalse: [ mensaje := 'No se encontro ninguna entrada de platea disponible para la 	venta' ].		] ifFalse: [ mensaje := 'Funcion no encontrada' ].					^mensaje .! !!ObraTeatro methodsFor: 'acceso' stamp: 'MB 5/4/2022 04:00'!titulo: anObject	titulo := anObject! !!ObraTeatro methodsFor: 'acceso' stamp: 'MB 5/4/2022 04:00'!direccion	^ direccion! !!ObraTeatro methodsFor: 'acceso' stamp: 'MB 5/4/2022 04:00'!direccion: anObject	direccion := anObject! !!ObraTeatro methodsFor: 'acceso' stamp: 'MB 5/4/2022 04:00'!titulo	^ titulo! !!ObraTeatro methodsFor: 'acceso' stamp: 'MB 5/4/2022 04:00'!funciones	^ funciones! !!ObraTeatro methodsFor: 'acceso' stamp: 'MB 5/4/2022 04:00'!funciones: anObject	funciones := anObject! !!ObraTeatro methodsFor: 'inicializacion' stamp: 'MB 5/4/2022 04:03'!initialize 	titulo := ' '.	funciones := SortedCollection new.	direccion := Direccion new.! !Object subclass: #Palco	instanceVariableNames: 'cantidadAsientos codigo'	classVariableNames: ''	package: 'TP1-PPR-2K4'!!Palco commentStamp: 'MB 5/4/2022 01:02' prior: 0!"Clase Palco"!!Palco methodsFor: 'control' stamp: 'MB 5/4/2022 04:40'!asString 	^ String cr , '|Cantidad Asientos : ', cantidadAsientos asString , '|Codigo : ' , codigo asString. ! !!Palco methodsFor: 'acceso' stamp: 'MB 5/4/2022 01:03'!cantidadAsientos	^ cantidadAsientos! !!Palco methodsFor: 'acceso' stamp: 'MB 5/4/2022 01:03'!codigo: anObject	codigo := anObject! !!Palco methodsFor: 'acceso' stamp: 'MB 5/4/2022 01:03'!cantidadAsientos: anObject	cantidadAsientos := anObject! !!Palco methodsFor: 'acceso' stamp: 'MB 5/4/2022 01:03'!codigo	^ codigo! !!Palco methodsFor: 'inicializacion' stamp: 'MB 5/4/2022 04:10'!initialize 	super initialize.		cantidadAsientos := 0.	codigo := ' '. 	! !