Object subclass: #TallerMecanico	instanceVariableNames: 'trabajos'	classVariableNames: ''	package: 'ejercicio3HerenciayColeccion'!!TallerMecanico methodsFor: 'control' stamp: 'initialze 7/5/2022 17:55'!agregarTrabajo: unTrabajo "entra un trabajo a la coleccione"	"verifica que el trabajo pertenezca a la clase Trabajos es decir que realmente sea un objeto Trabajo"	(unTrabajo isKindOf: Trabajo ) ifTrue: [ trabajos add: unTrabajo "lo resuelve todo el orderedCollection" ]	! !!TallerMecanico methodsFor: 'control' stamp: 'initialze 7/5/2022 17:57'!totalTrabajosRealizados	^ trabajos size. "Lo delega a la coleccion, para saber la cantida de trabajos tiene la coleccion"! !!TallerMecanico methodsFor: 'control' stamp: 'initialze 7/5/2022 18:05'!calcularCostoTotal	|total|	total := 0.	"necesito recorrer la coleccion para ir guardando los costos y acumularlos for=do"	"for i in trabajos"	trabajos do:[:i|total := total + i calcularCosto].	^total ! !!TallerMecanico methodsFor: 'initialization' stamp: 'initialze 7/5/2022 17:47'!initialize 	"SortedCollection new (coleccion se van ordenado a medida que agrego) Set new.(coleccion que no permite repetidos) Bag new(Colleciones no ordenada)"	trabajos := OrderedCollection new. "agregacion donde incialmente es una coleccion vacia"	"para la coleccion no se generan accesores, los hacemos por protocolos de control"! !Object subclass: #Trabajo	instanceVariableNames: 'tiempo empleado codigo vehiculo'	classVariableNames: ''	package: 'ejercicio3HerenciayColeccion'!!Trabajo methodsFor: 'converting' stamp: 'initialze 7/5/2022 17:23'!asString 	^'Codigo: ',codigo asString ,' |Empleado: ',empleado asString ,' |Tiempo hs: ',tiempo asString,' |Vehiculo: ',vehiculo asString,' |Costo del trabajo: ', (self  calcularCosto) asString .	"tambien podria ser vehiculo calcularCosto "! !!Trabajo methodsFor: 'initialization' stamp: 'initialze 7/5/2022 17:10'!initialize 	empleado := ''.	tiempo := 0.	codigo :=0.	vehiculo := nil. "esto por ser asociacion no necesito hacer el new"	"yo no deberia crear nunca vehiculos, esta clase es abstracta, por eso no seria Vehiculo new"	"solo si fuera una composicion"! !!Trabajo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 17:00'!codigo: anObject	codigo := anObject! !!Trabajo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 17:00'!vehiculo: anObject	vehiculo := anObject! !!Trabajo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 17:00'!empleado: anObject	empleado := anObject! !!Trabajo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 17:00'!tiempo: anObject	tiempo := anObject! !!Trabajo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 17:00'!empleado	^ empleado! !!Trabajo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 17:00'!tiempo	^ tiempo! !!Trabajo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 17:00'!vehiculo	^ vehiculo! !!Trabajo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 17:00'!codigo	^ codigo! !!Trabajo methodsFor: 'control' stamp: 'initialze 7/5/2022 17:16'!calcularCosto	"le pide a clase vehiculo que calcule el costo"	^vehiculo  calcularCosto.	"Delegacion de responsabilidad"! !Object subclass: #Vehiculo	instanceVariableNames: 'marca anio itv km'	classVariableNames: ''	package: 'ejercicio3HerenciayColeccion'!!Vehiculo methodsFor: 'initialization' stamp: 'initialze 7/5/2022 15:49'!initialize 	"debe llamarse si o si asi, para que se invoque automaticamente"	anio := 2022.	itv := false.	km := 0.	marca := ''.! !!Vehiculo methodsFor: 'converting' stamp: 'initialze 7/5/2022 16:16'!asString 	|aux|	aux := 'NO'.	itv ifTrue: [aux:='SI'].		^ 'Marca: ', marca ,'| anio: ', anio asString ,'| Itv: ', aux  ,'| km: ', km asString .! !!Vehiculo methodsFor: 'control' stamp: 'initialze 7/5/2022 15:54'!calcularCosto	"Permite calcular el costo segun el tipo de vehiculo"	^self subclassResponsibility.	"las clases hijas son las encargadas de calcular el costo"! !!Vehiculo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 15:45'!anio: anObject	anio := anObject! !!Vehiculo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 15:45'!marca	^ marca! !!Vehiculo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 15:45'!km	^ km! !!Vehiculo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 15:45'!km: anObject	km := anObject! !!Vehiculo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 15:45'!anio	^ anio! !!Vehiculo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 15:45'!marca: anObject	marca := anObject! !!Vehiculo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 15:45'!itv: anObject	itv := anObject! !!Vehiculo methodsFor: 'accessing' stamp: 'initialze 7/5/2022 15:45'!itv	^ itv! !Vehiculo subclass: #Auto	instanceVariableNames: 'esUtilitario tipoTraccion'	classVariableNames: ''	package: 'ejercicio3HerenciayColeccion'!!Auto methodsFor: 'accessing' stamp: 'initialze 7/5/2022 16:06'!esUtilitario	^ esUtilitario! !!Auto methodsFor: 'accessing' stamp: 'initialze 7/5/2022 16:06'!esUtilitario: anObject	esUtilitario := anObject! !!Auto methodsFor: 'accessing' stamp: 'initialze 7/5/2022 16:06'!tipoTraccion: anObject	tipoTraccion := anObject! !!Auto methodsFor: 'accessing' stamp: 'initialze 7/5/2022 16:06'!tipoTraccion	^ tipoTraccion! !!Auto methodsFor: 'converting' stamp: 'initialze 7/5/2022 16:25'!asString 	"uso el sef porque siempre necesitamos OBJETO MENSAJE "	^super asString, ' | tipoTraccion: ',tipoTraccion asString ,' | esUtilitario ', self esUtilitarioSiNo.! !!Auto methodsFor: 'converting' stamp: 'initialze 7/5/2022 16:23'!esUtilitarioSiNo	esUtilitario ifTrue: [ ^'Si' ] ifFalse: [ ^'No' ].! !!Auto methodsFor: 'initialization' stamp: 'initialze 7/5/2022 16:13'!initialize 	"Un automovil si o si es un vehiculo, para construirlos bien, primero deberia construir un vehiculo y luego un automovil"	super initialize.	esUtilitario := false.	tipoTraccion := 1.	! !!Auto methodsFor: 'control' stamp: 'initialze 7/5/2022 16:19'!calcularCosto	|costo|	costo := 300.	esUtilitario  ifTrue: [ costo := costo  * 1.1  ]. 	itv  ifFalse: [ costo := costo  +200 ].	^costo 	! !