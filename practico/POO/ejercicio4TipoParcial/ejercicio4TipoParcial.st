Object subclass: #Abogado	instanceVariableNames: 'nombre apellido documento correo causas'	classVariableNames: ''	package: 'ejercicio4TipoParcial'!!Abogado methodsFor: 'converting' stamp: 'initialze 7/6/2022 11:06'!asString	^'Abogado nombre: ', nombre asString,' |Apellido: ', apellido asString, ' |documento: ',documento asString,' |Correo: ',correo asString,' |Cant causas: ', causas size asString. ! !!Abogado methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 10:52'!calcularHonorarios	^ self subclassResponsibility 	"Si los metodos estan con () nos indican que no reciben ningun colaborador externo"! !!Abogado methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 18:04'!cantidadCausasAbiertas	^(causas select: [:x|x estado =1]) size! !!Abogado methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 16:12'!causasFavorables	"Como determinar las causas favorables de un abogado partiendo de toda la coleccion"	"SELECT manipulacion de colecciones, sirve para hacer un subconjunto de la coleccion inicial" 	"sirve para filtrar"	"recorre todas las causas y en cada itereacion guardara en x la casusa que cumpla las condiciones"	"es decir que sea favorable y este cerrada"	^causas select: [:x | (x estado = 2) & (x sentencia =1) ].	"devuelve un subconjunto"	"el select siempre tendra condiciones despies de la |"! !!Abogado methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 11:01'!agregarCausa: unaCausa	(unaCausa  isKindOf: Causa) ifTrue: [ causas add: unaCausa ]	 ! !!Abogado methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 18:56'!tieneCausa: unNumero	|aux |	aux := causas detect: [:x| x nro = unNumero ] ifNone:[nil].	"el detect retorna un objeto | el select una subcoleccion | el do: No retorna"	^aux isNotNil ! !!Abogado methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 19:00'!cerrarCausa: numeroCausa conSentencia: sentencia monto:monto	|aux|	aux := causas detect: [ :x| x nro = numeroCausa  ] ifNone:[nil].	(aux isNotNil ) ifTrue: [ aux cerrar: sentencia monto: monto ]! !!Abogado methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:48'!documento: anObject	documento := anObject! !!Abogado methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:48'!documento	^ documento! !!Abogado methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:48'!nombre	^ nombre! !!Abogado methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:48'!correo	^ correo! !!Abogado methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:48'!apellido	^ apellido! !!Abogado methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:48'!nombre: anObject	nombre := anObject! !!Abogado methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:48'!apellido: anObject	apellido := anObject! !!Abogado methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:48'!correo: anObject	correo := anObject! !!Abogado methodsFor: 'initialization' stamp: 'initialze 7/6/2022 10:59'!initialize 	nombre := ''.	apellido := ''.	documento := 0.	correo := ''.	causas := OrderedCollection new.	"Bag puede tener objetos repetidos , order sorted "	""! !Abogado subclass: #AbogadoCivil	instanceVariableNames: 'porcentaje'	classVariableNames: ''	package: 'ejercicio4TipoParcial'!!AbogadoCivil methodsFor: 'initialization' stamp: 'initialze 7/6/2022 16:05'!initialize 	super initialize.	porcentaje := 0.! !!AbogadoCivil methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 16:16'!calcularHonorarios 	"necesitamos recorrer si o si cada una de las causas, y por cada una de las casusas favorables para calcular el montoTotal"	|montoTotal|	montoTotal := 0.	"x monto es lo msimo que hacer objeto.nombre"	super causasFavorables do:[:x| montoTotal := montoTotal + x monto].	"Calculo del procentaje"	^montoTotal *(porcentaje/100) asFloat 	"EN los parciales se evalua el do, select y detect"! !!AbogadoCivil methodsFor: 'accessing' stamp: 'initialze 7/6/2022 16:03'!porcentaje: anObject	porcentaje := anObject! !!AbogadoCivil methodsFor: 'accessing' stamp: 'initialze 7/6/2022 16:03'!porcentaje	^ porcentaje! !!AbogadoCivil methodsFor: 'converting' stamp: 'initialze 7/6/2022 16:04'!asString 	^super asString ,' |Porcentaje: %', porcentaje asString.! !Abogado subclass: #AbogadoPenalista	instanceVariableNames: 'montoFijo'	classVariableNames: ''	package: 'ejercicio4TipoParcial'!!AbogadoPenalista methodsFor: 'converting' stamp: 'initialze 7/6/2022 11:12'!asString	^ super asString ,' |Abogado penalista montoFijo: ', montoFijo  asString .! !!AbogadoPenalista methodsFor: 'accessing' stamp: 'initialze 7/6/2022 11:09'!montoFijo	^ montoFijo! !!AbogadoPenalista methodsFor: 'accessing' stamp: 'initialze 7/6/2022 11:09'!montoFijo: anObject	montoFijo := anObject! !!AbogadoPenalista methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 16:00'!calcularHonorarios "super lo necesito para llamar al metodo del padre"	^(super causasFavorables size) * montoFijo ! !!AbogadoPenalista methodsFor: 'initialization' stamp: 'initialze 7/6/2022 16:04'!initialize 	super initialize.	montoFijo := 0.! !Object subclass: #Causa	instanceVariableNames: 'nro demandante estado sentencia monto fuero'	classVariableNames: ''	package: 'ejercicio4TipoParcial'!!Causa methodsFor: 'converting' stamp: 'initialze 7/6/2022 10:40'!asString 	^'Nro causa: ', nro asString , ' |Demandante: ',demandante asString ,' |Monto: ',monto asString,' |Sentencia: ',sentencia asString,' |Estado: ',estado asString,' |Fuero: ',fuero asString.! !!Causa methodsFor: 'initialization' stamp: 'initialze 7/6/2022 11:19'!initialize 	nro := 0.	demandante := ''.	"estado 2 es = a cerrada"	estado := 1.	"sentencia si es 1 es favorable, si es 2 no es favorable"	sentencia := 0.	monto:=0.	"fuero = a 2 es de tipo penal, 1 = civil"	fuero :=1.	! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!estado	^ estado! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!sentencia: anObject	sentencia := anObject! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!monto	^ monto! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!nro	^ nro! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!demandante	^ demandante! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!fuero	^ fuero! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!fuero: anObject	fuero := anObject! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!nro: anObject	nro := anObject! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!sentencia	^ sentencia! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!demandante: anObject	demandante := anObject! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!monto: anObject	monto := anObject! !!Causa methodsFor: 'accessing' stamp: 'initialze 7/6/2022 10:34'!estado: anObject	estado := anObject! !!Causa methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 19:02'!cerrar: unaSentencia monto: unMonto	estado:= 2.	sentencia := unaSentencia.	monto := unMonto .! !Object subclass: #Estudio	instanceVariableNames: 'abogados'	classVariableNames: ''	package: 'ejercicio4TipoParcial'!!Estudio methodsFor: 'initialization' stamp: 'initialze 7/6/2022 17:12'!initialize 	abogados := OrderedCollection new.	"orden de ingreso"! !!Estudio methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 21:48'!liquidarHonorarios: unDocumneto	|informe aux|	informe := 'informe de liquidacion de honorarios', String cr.	aux:= abogados detect: [ :x | x documento  = unDocumneto ] ifNone:[nil].		(aux isNotNil ) ifTrue: [ informe:=informe ,'Abogado ', aux apellido,' ',aux nombre, String cr.		aux causasFavorables do:[:x| informe:= informe, x asString, String cr ].		informe := informe , 'Total honorarios', aux calcularHonorarios asString.].	^informe ! !!Estudio methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 18:07'!abrirCausa: unaCausa	"Permite abrir una causa y asignarsela a un abogado del estudio"	|"fueroAux" abogadosAux abogadoElegido  |	"fueroAux := 'AbogadoPenalista'."	"(unaCausa fuero  = 1) ifTrue: (fueroAux:='AbogadoCivil')."		"Coleccion de abogados devolveme una subcolecicon de todos aquelos abogados cuyo nombre de clase sea o civil o penalista"	"tambien se podria resolver con el iskindof "	"abogadoAux := abogados select: [ :x | x class name = fueroAux  ]."		(unaCausa fuero = 1) "Identificar fuero"	ifTrue: [ abogadosAux := abogados select: [ :x | x isKindOf: AbogadoCivil  ] ] 	ifFalse:[ abogadosAux := abogados select: [ :x | x isKindOf: AbogadoPenalista   ]]. 	"abogadosAux es una coleccion de abogados que pertenecen a ese fuero"	"3- Ya teneieno lso abogados buscar a quien asignalre la causa"	(abogadosAux isNotEmpty  ) ifTrue: [ abogadoElegido := (abogadosAux asSortedCollection: [:x :y | x cantidadCausasAbiertas < y cantidadCausasAbiertas]) first. "se queda con el primero de la coleccion" abogadoElegido  agregarCausa:  unaCausa ]! !!Estudio methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 19:03'!cerrarCausa: unNumero conSentencia: unaSentencia monto:unMonto	"Permite cerrar una causa a partir de la sentencia y el monto asociados"	abogados do: [ :x| (x tieneCausa: unNumero) ifTrue:[x cerrarCausa: unNumero conSentencia: unaSentencia monto: unMonto. ^true ]].	^false ! !!Estudio methodsFor: 'operaciones' stamp: 'initialze 7/6/2022 17:13'!agregarAbogado: unAbogado	(unAbogado isKindOf: Abogado ) ifTrue: [abogados add: unAbogado ]! !